using DevExpress.XtraBars;
using DevExpress.XtraEditors;
using Ebda3Soft.Core.Database;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using Ebda3Soft.Core;
using Ebda3Soft.Core.Database.Entities.Financial;

namespace Ebda3Soft.Views.UserControls.Financial
{
    public partial class JournalCollectionView : DevExpress.XtraEditors.XtraUserControl
    {
        SQLServerDbContext dbContext;
        private readonly Ebda3Soft.Core.Enums.JournalFormView? journalView;

        public JournalCollectionView()
        {
            InitializeComponent();
            SharedView.SetTranslate(ribbonControl.Pages);

            dbContext = SQLServerDbContext.Instance;
            TasksPage.Enabled = false;
            RefreshData();
        }
        public JournalCollectionView(Ebda3Soft.Core.Enums.JournalFormView journalView)
        {
            InitializeComponent();

            this.journalView = journalView;
            dbContext = SQLServerDbContext.Instance;

            RefreshData();
        }
        void bbiPrintPreview_ItemClick(object sender, ItemClickEventArgs e)
        {
            gridControl.ShowRibbonPrintPreview();
        }

        private void bbiNew_ItemClick(object sender, ItemClickEventArgs e)
        {
            New();
        }

        private void gridView_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            if (e.Clicks == 2)
            {
                Edit();
            }
        }

        public void New()
        {

            SharedView.ShowUserControlForm(new JournalView(bindingSource, Ebda3Soft.Core.Enums.TransactionType.Adding,journalView.Value));
        }

        public void Delete()
        {
            var entity = gridView.GetFocusedRow() as BaseEntity;
            if (entity != null)
            {
                //if (entity.BindingSource == null)
                entity.BindingSource = new BindingSource(bindingSource, "");
                entity.BindingSource.Position = bindingSource.Position;
                entity.Delete();
            }
        }

        public bool IsReadyToEdit()
        {
            return gridView.GetFocusedRow() != null && TasksPage.Enabled == true;
        }
        public void Edit()
        {
            if (IsReadyToEdit())
                SharedView.ShowUserControlForm(new JournalView(bindingSource, Ebda3Soft.Core.Enums.TransactionType.Modifying,journalView.Value));
        }

        private void UserControlLoaded(object sender, EventArgs e)
        {
            bbiDelete.ItemClick += (o, ev) => Delete();
            bbiNew.ItemClick += (o, ev) => New();
            bbiEdit.ItemClick += (o, ev) => Edit();
            bbiRefresh.ItemClick += (o, ev) => RefreshData();
            gridView.RowClick += (o, ev) =>
            {
                if (ev.Clicks == 2)
                    Edit();
            };
        }

        public void RefreshData()
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Journals.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                dbContext.JournalTypes.Load();
                dbContext.Accounts.Load();
                dbContext.Currencies.Load();
                Func<Journal, bool> predicate = a=> true;
                if (journalView != null)
                {
                    predicate= a => a.JournalType.JournalForm == journalView;
                }

                bindingSource.DataSource = dbContext.Journals.Where(predicate).ToList();


            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        public bool IsReadyToDelete()
        {
            return true;
        }

    }
}
