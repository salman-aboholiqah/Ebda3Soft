using DevExpress.XtraBars.Docking2010.Customization;
using DevExpress.XtraEditors;
using Ebda3Soft.Core.Database;
using Ebda3Soft.Core.Database.Entities.Financial;
using Ebda3Soft.Core.Database.Interfaces;
using Ebda3Soft.Core.Enums;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Entity;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Ebda3Soft.Views.UserControls.Financial
{
    public partial class AccountView : DevExpress.XtraEditors.XtraUserControl, IEntityControl
    {
        private SQLServerDbContext dbContext;
        private TransactionType transactionType;
        public BaseEntity BaseEntity { get; set; }

        public AccountView(BindingSource bindingSource, TransactionType transactionType)
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            this.dbContext = SQLServerDbContext.Instance;
            // Call the Load method to get the data for the given DbSet from the database.

            dbContext.AccountTypes.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                accountTypeGridLookUpEdit1.Properties.DataSource = dbContext.AccountTypes.Local.ToBindingList();

            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());

            this.bindingSource.DataSource = bindingSource;
            this.bindingSource.Position = bindingSource.Position;
            this.transactionType = transactionType;
            BaseEntity = bindingSource.Current as BaseEntity;
            //BaseEntity.DataLayoutControl = dataLayoutControl1;
            if (BaseEntity != null)
            {
                InitBaseEntity();


            }
            if (this.transactionType == TransactionType.Adding)
            {
                if (BaseEntity == null)
                {
                    bindingSource.AddNew();
                    ItemForCurrencies.Enabled = false;
                    BaseEntity = bindingSource.Current as BaseEntity;
                    InitBaseEntity();
                }
                else
                {
                    BaseEntity.New();
                    //InitBaseEntity();
                }
            }
            dataLayoutControl1.DataSource = BaseEntity.BindingSource;

            logInfoControl1.ReferenceGuid = (bindingSource.Current as Account)?.AccountID ?? Guid.Empty;

        }
        public void InitBaseEntity()
        {
            BaseEntity.Validation = null;
            BaseEntity.Validation += dataLayoutControl1.Validate;
            BaseEntity.BindingSource = new BindingSource();
            BaseEntity.BindingSource = bindingSource;
            BaseEntity.TransactionType = transactionType;
            BaseEntity.EntitySaved += (e) => ItemForCurrencies.Enabled = true;
            BaseEntity.InitNew += (e) => ItemForCurrencies.Enabled = false;
        }
        private void currencyGridLookUpEdit1_Properties_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            if (e.Button.Kind == DevExpress.XtraEditors.Controls.ButtonPredefines.Plus)
            {
                var currency = currencyGridLookUpEdit1.GetSelectedDataRow() as Currency;
                if (currency != null)
                {
                    var account = (bindingSource.Current as Account);
                    if (account != null)
                    {
                        if (account.Currencies == null)
                        {
                            account.Currencies = new List<Currency>();

                        }
                        if (account.Currencies.Count(a => a.CurrencyID == currency.CurrencyID) > 0)
                        {
                            FlyoutDialog.Show(ParentForm, "Error", "Cannot Duplicate Currency",MessageBoxButtons.OK);
                            return;
                        }
                        account.Currencies.Add(currency);
                        this.CurrenciesGridControl.DataBindings.Clear();
                        this.CurrenciesGridControl.DataSource = account.Currencies.ToList();
                        
                        this.CurrenciesGridControl.RefreshDataSource();

                    }
                }
            }
        }

        private void gridView1_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            var account = (bindingSource.Current as Account);
            if (account != null)
            {
                if (account.Currencies == null)
                {
                    account.Currencies = new List<Currency>();
                }
            }
        }

        private void gridView1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                var currency = gridView1.GetFocusedRow() as Currency;
                if (currency != null)
                {
                    var result =  FlyoutDialog.Show(ParentForm, "Delete Confirm", $"Do you want delete currency {currency}", MessageBoxButtons.YesNo);
                    if (result == DialogResult.Yes)
                    {
                        var account = (bindingSource.Current as Account);
                        if (account != null)
                        {
                            account.Currencies.Remove(currency);
                            this.CurrenciesGridControl.DataBindings.Clear();
                            this.CurrenciesGridControl.DataSource = account.Currencies.ToList();
                        }
                    }

                }
            }
        }
    }
}
